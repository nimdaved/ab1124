package org.nimdaved.toolrent.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HolidayAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHolidayAllPropertiesEquals(Holiday expected, Holiday actual) {
        assertHolidayAutoGeneratedPropertiesEquals(expected, actual);
        assertHolidayAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHolidayAllUpdatablePropertiesEquals(Holiday expected, Holiday actual) {
        assertHolidayUpdatableFieldsEquals(expected, actual);
        assertHolidayUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHolidayAutoGeneratedPropertiesEquals(Holiday expected, Holiday actual) {
        assertThat(expected)
            .as("Verify Holiday auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHolidayUpdatableFieldsEquals(Holiday expected, Holiday actual) {
        assertThat(expected)
            .as("Verify Holiday relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getHolidayType()).as("check holidayType").isEqualTo(actual.getHolidayType()))
            .satisfies(e -> assertThat(e.getMonthNumber()).as("check monthNumber").isEqualTo(actual.getMonthNumber()))
            .satisfies(e -> assertThat(e.getDayNumber()).as("check dayNumber").isEqualTo(actual.getDayNumber()))
            .satisfies(e ->
                assertThat(e.getObservedOnClosestWeekday())
                    .as("check observedOnClosestWeekday")
                    .isEqualTo(actual.getObservedOnClosestWeekday())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHolidayUpdatableRelationshipsEquals(Holiday expected, Holiday actual) {
        // empty method
    }
}
