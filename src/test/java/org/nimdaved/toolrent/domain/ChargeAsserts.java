package org.nimdaved.toolrent.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.nimdaved.toolrent.domain.AssertUtils.bigDecimalCompareTo;

public class ChargeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeAllPropertiesEquals(Charge expected, Charge actual) {
        assertChargeAutoGeneratedPropertiesEquals(expected, actual);
        assertChargeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeAllUpdatablePropertiesEquals(Charge expected, Charge actual) {
        assertChargeUpdatableFieldsEquals(expected, actual);
        assertChargeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeAutoGeneratedPropertiesEquals(Charge expected, Charge actual) {
        assertThat(expected)
            .as("Verify Charge auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeUpdatableFieldsEquals(Charge expected, Charge actual) {
        assertThat(expected)
            .as("Verify Charge relevant properties")
            .satisfies(e -> assertThat(e.getToolType()).as("check toolType").isEqualTo(actual.getToolType()))
            .satisfies(e ->
                assertThat(e.getDailyCharge())
                    .as("check dailyCharge")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getDailyCharge())
            )
            .satisfies(e -> assertThat(e.getWeekdayCharge()).as("check weekdayCharge").isEqualTo(actual.getWeekdayCharge()))
            .satisfies(e -> assertThat(e.getWeekendCharge()).as("check weekendCharge").isEqualTo(actual.getWeekendCharge()))
            .satisfies(e -> assertThat(e.getHolidayCharge()).as("check holidayCharge").isEqualTo(actual.getHolidayCharge()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChargeUpdatableRelationshipsEquals(Charge expected, Charge actual) {
        // empty method
    }
}
